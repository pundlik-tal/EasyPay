# EasyPay Payment Gateway - Logstash Configuration

input {
  # File input for application logs
  file {
    path => "/var/log/easypay/*.log"
    start_position => "beginning"
    codec => "json"
    type => "easypay-logs"
  }
  
  # TCP input for real-time logs
  tcp {
    port => 5044
    codec => "json"
    type => "easypay-tcp"
  }
  
  # HTTP input for webhook logs
  http {
    port => 8080
    codec => "json"
    type => "easypay-http"
  }
}

filter {
  # Parse EasyPay application logs
  if [type] == "easypay-logs" or [type] == "easypay-tcp" or [type] == "easypay-http" {
    # Add timestamp if not present
    if ![timestamp] {
      mutate {
        add_field => { "timestamp" => "%{@timestamp}" }
      }
    }
    
    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # Add service information
    mutate {
      add_field => { "service" => "easypay-payment-gateway" }
      add_field => { "version" => "0.1.0" }
    }
    
    # Parse payment events
    if [event_type] == "payment" {
      mutate {
        add_tag => [ "payment-event" ]
      }
    }
    
    # Parse authentication events
    if [event_type] == "auth" {
      mutate {
        add_tag => [ "auth-event" ]
      }
    }
    
    # Parse security events
    if [audit_category] == "security" {
      mutate {
        add_tag => [ "security-event" ]
      }
    }
    
    # Parse webhook events
    if [event_type] =~ /webhook/ {
      mutate {
        add_tag => [ "webhook-event" ]
      }
    }
    
    # Parse error events
    if [level] == "ERROR" or [level] == "CRITICAL" {
      mutate {
        add_tag => [ "error-event" ]
      }
    }
    
    # Parse performance events
    if [performance_level] {
      mutate {
        add_tag => [ "performance-event" ]
      }
    }
    
    # Extract payment amount for metrics
    if [amount] {
      mutate {
        convert => { "amount" => "float" }
      }
    }
    
    # Extract duration for performance metrics
    if [duration] {
      mutate {
        convert => { "duration" => "float" }
      }
    }
    
    # Extract HTTP status codes
    if [status_code] {
      mutate {
        convert => { "status_code" => "integer" }
      }
    }
    
    # Extract correlation ID for tracing
    if [correlation_id] {
      mutate {
        add_field => { "trace_id" => "%{correlation_id}" }
      }
    }
    
    # Add geographic information if available
    if [ip_address] {
      geoip {
        source => "ip_address"
        target => "geoip"
      }
    }
    
    # Parse user agent for web requests
    if [user_agent] {
      useragent {
        source => "user_agent"
        target => "user_agent_parsed"
      }
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "easypay-logs-%{+YYYY.MM.dd}"
    template_name => "easypay-logs"
    template => "/usr/share/logstash/templates/easypay-logs.json"
    template_overwrite => true
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
  
  # Output payment events to separate index
  if "payment-event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "easypay-payments-%{+YYYY.MM.dd}"
    }
  }
  
  # Output security events to separate index
  if "security-event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "easypay-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Output error events to separate index
  if "error-event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "easypay-errors-%{+YYYY.MM.dd}"
    }
  }
}
