=== Integration Tests with Coverage ===
Exit Code: 1
Command: C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\python.exe -m pytest tests/integration/ --cov=src --cov-report=term-missing --cov-report=html:htmlcov_integration --cov-report=xml:coverage_integration.xml -v

=== STDOUT ===
============================= test session starts =============================
platform win32 -- Python 3.11.9, pytest-7.4.3, pluggy-1.6.0 -- C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\PundlikR\Documents\hackathon\EasyPay
configfile: pytest.ini
plugins: anyio-3.7.1, Faker-37.5.3, langsmith-0.4.10, asyncio-0.21.1, cov-4.1.0, mock-3.12.0
asyncio: mode=Mode.STRICT
collecting ... collected 34 items

tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_create_payment_endpoint ERROR [  2%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_create_payment_with_correlation_id ERROR [  5%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_create_payment_validation_error ERROR [  8%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_by_uuid ERROR [ 11%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_by_external_id ERROR [ 14%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_not_found ERROR [ 17%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_endpoint ERROR [ 20%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_with_filters ERROR [ 23%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_pagination ERROR [ 26%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_invalid_status ERROR [ 29%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_endpoint ERROR [ 32%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_by_external_id ERROR [ 35%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_validation_error ERROR [ 38%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_refund_payment_endpoint ERROR [ 41%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_refund_payment_with_correlation_id ERROR [ 44%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_refund_payment_not_refundable ERROR [ 47%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_cancel_payment_endpoint ERROR [ 50%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_cancel_payment_not_cancellable ERROR [ 52%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_search_payments_endpoint ERROR [ 55%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_search_payments_with_date_range ERROR [ 58%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_status_history_endpoint ERROR [ 61%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_metadata_endpoint ERROR [ 64%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_metadata_endpoint ERROR [ 67%]
tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_circuit_breaker_metrics_endpoint ERROR [ 70%]
tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_invalid_json_request ERROR [ 73%]
tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_missing_required_fields ERROR [ 76%]
tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_invalid_uuid_format ERROR [ 79%]
tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_large_request_body ERROR [ 82%]
tests/integration/test_payment_integration.py::TestPaymentIntegration::test_complete_payment_lifecycle FAILED [ 85%]
tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_search_and_filtering FAILED [ 88%]
tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_statistics FAILED [ 91%]
tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_error_scenarios FAILED [ 94%]
tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_external_id_operations FAILED [ 97%]
tests/integration/test_payment_integration.py::TestPaymentIntegration::test_concurrent_payment_operations FAILED [100%]

=================================== ERRORS ====================================
_____ ERROR at setup of TestPaymentEndpoints.test_create_payment_endpoint _____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 15
      @pytest.mark.asyncio
      async def test_create_payment_endpoint(self, test_client: AsyncClient):
          """Test POST /payments endpoint."""
          payment_data = {
              "amount": "25.50",
              "currency": "USD",
              "payment_method": PaymentMethod.CREDIT_CARD.value,
              "customer_id": "cust_api_test",
              "customer_email": "api@example.com",
              "customer_name": "API Test Customer",
              "card_token": "tok_api_test",
              "description": "API test payment",
              "metadata": {"test_type": "api_endpoint"},
              "is_test": True
          }

          response = await test_client.post("/api/v1/payments/", json=payment_data)

          assert response.status_code == 201
          data = response.json()

          assert "id" in data
          assert "external_id" in data
          assert data["amount"] == "25.50"
          assert data["currency"] == "USD"
          assert data["status"] == PaymentStatus.PENDING.value
          assert data["customer_id"] == "cust_api_test"
          assert data["customer_email"] == "api@example.com"
          assert data["description"] == "API test payment"
          assert data["is_test"] is True
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:15
_ ERROR at setup of TestPaymentEndpoints.test_create_payment_with_correlation_id _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 46
      @pytest.mark.asyncio
      async def test_create_payment_with_correlation_id(self, test_client: AsyncClient):
          """Test POST /payments endpoint with correlation ID."""
          payment_data = {
              "amount": "15.00",
              "currency": "USD",
              "payment_method": PaymentMethod.CREDIT_CARD.value,
              "customer_id": "cust_correlation_test",
              "customer_email": "correlation@example.com",
              "customer_name": "Correlation Test Customer",
              "card_token": "tok_correlation_test",
              "description": "Correlation test payment",
              "is_test": True
          }

          headers = {"X-Correlation-ID": "test-correlation-123"}
          response = await test_client.post("/api/v1/payments/", json=payment_data, headers=headers)

          assert response.status_code == 201
          data = response.json()
          assert data["amount"] == "15.00"
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:46
_ ERROR at setup of TestPaymentEndpoints.test_create_payment_validation_error _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 68
      @pytest.mark.asyncio
      async def test_create_payment_validation_error(self, test_client: AsyncClient):
          """Test POST /payments endpoint with validation error."""
          invalid_payment_data = {
              "amount": "-10.00",  # Invalid negative amount
              "currency": "USD",
              "payment_method": PaymentMethod.CREDIT_CARD.value,
              "customer_id": "cust_validation_test",
              "customer_email": "validation@example.com",
              "customer_name": "Validation Test Customer",
              "card_token": "tok_validation_test",
              "description": "Validation test payment",
              "is_test": True
          }

          response = await test_client.post("/api/v1/payments/", json=invalid_payment_data)

          assert response.status_code == 400
          data = response.json()
          assert "detail" in data
          assert "Payment amount must be greater than 0" in data["detail"]
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:68
_______ ERROR at setup of TestPaymentEndpoints.test_get_payment_by_uuid _______
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 90
      @pytest.mark.asyncio
      async def test_get_payment_by_uuid(self, test_client: AsyncClient, sample_payment):
          """Test GET /payments/{id} endpoint with UUID."""
          response = await test_client.get(f"/api/v1/payments/{sample_payment.id}")

          assert response.status_code == 200
          data = response.json()

          assert data["id"] == str(sample_payment.id)
          assert data["external_id"] == sample_payment.external_id
          assert data["amount"] == str(sample_payment.amount)
          assert data["currency"] == sample_payment.currency
          assert data["status"] == sample_payment.status.value
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:90
___ ERROR at setup of TestPaymentEndpoints.test_get_payment_by_external_id ____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 104
      @pytest.mark.asyncio
      async def test_get_payment_by_external_id(self, test_client: AsyncClient, sample_payment):
          """Test GET /payments/{id} endpoint with external ID."""
          response = await test_client.get(f"/api/v1/payments/{sample_payment.external_id}")

          assert response.status_code == 200
          data = response.json()

          assert data["id"] == str(sample_payment.id)
          assert data["external_id"] == sample_payment.external_id
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:104
______ ERROR at setup of TestPaymentEndpoints.test_get_payment_not_found ______
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 115
      @pytest.mark.asyncio
      async def test_get_payment_not_found(self, test_client: AsyncClient):
          """Test GET /payments/{id} endpoint with non-existent ID."""
          non_existent_id = str(uuid.uuid4())
          response = await test_client.get(f"/api/v1/payments/{non_existent_id}")

          assert response.status_code == 404
          data = response.json()
          assert "detail" in data
          assert f"Payment {non_existent_id} not found" in data["detail"]
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:115
_____ ERROR at setup of TestPaymentEndpoints.test_list_payments_endpoint ______
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 126
      @pytest.mark.asyncio
      async def test_list_payments_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test GET /payments endpoint."""
          response = await test_client.get("/api/v1/payments/")

          assert response.status_code == 200
          data = response.json()

          assert "payments" in data
          assert "total" in data
          assert "page" in data
          assert "per_page" in data
          assert "total_pages" in data
          assert len(data["payments"]) >= 1
          assert data["total"] >= 1
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:126
___ ERROR at setup of TestPaymentEndpoints.test_list_payments_with_filters ____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 142
      @pytest.mark.asyncio
      async def test_list_payments_with_filters(self, test_client: AsyncClient, sample_payment):
          """Test GET /payments endpoint with filters."""
          # Test filtering by customer_id
          response = await test_client.get(
              f"/api/v1/payments/?customer_id={sample_payment.customer_id}"
          )

          assert response.status_code == 200
          data = response.json()

          assert len(data["payments"]) >= 1
          for payment in data["payments"]:
              assert payment["customer_id"] == sample_payment.customer_id

          # Test filtering by status
          response = await test_client.get(
              f"/api/v1/payments/?status={sample_payment.status.value}"
          )

          assert response.status_code == 200
          data = response.json()

          assert len(data["payments"]) >= 1
          for payment in data["payments"]:
              assert payment["status"] == sample_payment.status.value
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:142
____ ERROR at setup of TestPaymentEndpoints.test_list_payments_pagination _____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 169
      @pytest.mark.asyncio
      async def test_list_payments_pagination(self, test_client: AsyncClient):
          """Test GET /payments endpoint pagination."""
          response = await test_client.get("/api/v1/payments/?page=1&per_page=5")

          assert response.status_code == 200
          data = response.json()

          assert data["page"] == 1
          assert data["per_page"] == 5
          assert len(data["payments"]) <= 5
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:169
__ ERROR at setup of TestPaymentEndpoints.test_list_payments_invalid_status ___
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 181
      @pytest.mark.asyncio
      async def test_list_payments_invalid_status(self, test_client: AsyncClient):
          """Test GET /payments endpoint with invalid status."""
          response = await test_client.get("/api/v1/payments/?status=invalid_status")

          assert response.status_code == 400
          data = response.json()
          assert "detail" in data
          assert "Invalid status" in data["detail"]
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:181
_____ ERROR at setup of TestPaymentEndpoints.test_update_payment_endpoint _____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 191
      @pytest.mark.asyncio
      async def test_update_payment_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test PUT /payments/{id} endpoint."""
          update_data = {
              "description": "Updated via API",
              "metadata": {"updated_via": "api", "timestamp": "2024-01-01T00:00:00Z"}
          }

          response = await test_client.put(
              f"/api/v1/payments/{sample_payment.id}",
              json=update_data
          )

          assert response.status_code == 200
          data = response.json()

          assert data["id"] == str(sample_payment.id)
          assert data["description"] == "Updated via API"
          assert data["metadata"]["updated_via"] == "api"
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:191
__ ERROR at setup of TestPaymentEndpoints.test_update_payment_by_external_id __
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 211
      @pytest.mark.asyncio
      async def test_update_payment_by_external_id(self, test_client: AsyncClient, sample_payment):
          """Test PUT /payments/{id} endpoint with external ID."""
          update_data = {
              "description": "Updated via external ID",
              "metadata": {"updated_via": "external_id"}
          }

          response = await test_client.put(
              f"/api/v1/payments/{sample_payment.external_id}",
              json=update_data
          )

          assert response.status_code == 200
          data = response.json()

          assert data["id"] == str(sample_payment.id)
          assert data["description"] == "Updated via external ID"
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:211
_ ERROR at setup of TestPaymentEndpoints.test_update_payment_validation_error _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 230
      @pytest.mark.asyncio
      async def test_update_payment_validation_error(self, test_client: AsyncClient, sample_payment):
          """Test PUT /payments/{id} endpoint with validation error."""
          invalid_update_data = {
              "description": None,
              "metadata": None  # Both fields are None
          }

          response = await test_client.put(
              f"/api/v1/payments/{sample_payment.id}",
              json=invalid_update_data
          )

          assert response.status_code == 400
          data = response.json()
          assert "detail" in data
          assert "At least one field must be provided for update" in data["detail"]
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:230
_____ ERROR at setup of TestPaymentEndpoints.test_refund_payment_endpoint _____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 248
      @pytest.mark.asyncio
      async def test_refund_payment_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/{id}/refund endpoint."""
          # First, set the payment status to COMPLETED to make it refundable
          # This would normally be done by Authorize.net processing
          sample_payment.status = PaymentStatus.COMPLETED
          await sample_payment.awaitable_attrs.session.commit()

          refund_data = {
              "amount": "5.00",
              "reason": "API test refund",
              "metadata": {"refund_via": "api"}
          }

          response = await test_client.post(
              f"/api/v1/payments/{sample_payment.id}/refund",
              json=refund_data
          )

          assert response.status_code == 200
          data = response.json()

          assert data["id"] == str(sample_payment.id)
          assert data["status"] in [PaymentStatus.REFUNDED.value, PaymentStatus.PARTIALLY_REFUNDED.value]
          assert data["refunded_amount"] == "5.00"
          assert data["refund_count"] == 1
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:248
_ ERROR at setup of TestPaymentEndpoints.test_refund_payment_with_correlation_id _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 275
      @pytest.mark.asyncio
      async def test_refund_payment_with_correlation_id(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/{id}/refund endpoint with correlation ID."""
          # Set payment status to COMPLETED
          sample_payment.status = PaymentStatus.COMPLETED
          await sample_payment.awaitable_attrs.session.commit()

          refund_data = {
              "amount": "3.00",
              "reason": "Correlation test refund"
          }

          headers = {"X-Correlation-ID": "refund-correlation-456"}
          response = await test_client.post(
              f"/api/v1/payments/{sample_payment.id}/refund",
              json=refund_data,
              headers=headers
          )

          assert response.status_code == 200
          data = response.json()
          assert data["refunded_amount"] == "3.00"
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:275
__ ERROR at setup of TestPaymentEndpoints.test_refund_payment_not_refundable __
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 298
      @pytest.mark.asyncio
      async def test_refund_payment_not_refundable(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/{id}/refund endpoint with non-refundable payment."""
          # Keep payment status as PENDING (not refundable)
          refund_data = {
              "amount": "5.00",
              "reason": "Test refund"
          }

          response = await test_client.post(
              f"/api/v1/payments/{sample_payment.id}/refund",
              json=refund_data
          )

          assert response.status_code == 400
          data = response.json()
          assert "detail" in data
          assert "Payment cannot be refunded" in data["detail"]
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:298
_____ ERROR at setup of TestPaymentEndpoints.test_cancel_payment_endpoint _____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 317
      @pytest.mark.asyncio
      async def test_cancel_payment_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/{id}/cancel endpoint."""
          # Keep payment status as PENDING (cancellable)
          cancel_data = {
              "reason": "API test cancellation",
              "metadata": {"cancelled_via": "api"}
          }

          response = await test_client.post(
              f"/api/v1/payments/{sample_payment.id}/cancel",
              json=cancel_data
          )

          assert response.status_code == 200
          data = response.json()

          assert data["id"] == str(sample_payment.id)
          assert data["status"] == PaymentStatus.VOIDED.value
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:317
_ ERROR at setup of TestPaymentEndpoints.test_cancel_payment_not_cancellable __
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 337
      @pytest.mark.asyncio
      async def test_cancel_payment_not_cancellable(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/{id}/cancel endpoint with non-cancellable payment."""
          # Set payment status to COMPLETED (not cancellable)
          sample_payment.status = PaymentStatus.COMPLETED
          await sample_payment.awaitable_attrs.session.commit()

          cancel_data = {
              "reason": "Test cancellation"
          }

          response = await test_client.post(
              f"/api/v1/payments/{sample_payment.id}/cancel",
              json=cancel_data
          )

          assert response.status_code == 400
          data = response.json()
          assert "detail" in data
          assert "Payment cannot be cancelled" in data["detail"]
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:337
____ ERROR at setup of TestPaymentEndpoints.test_search_payments_endpoint _____
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 358
      @pytest.mark.asyncio
      async def test_search_payments_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/search endpoint."""
          search_data = {
              "customer_id": sample_payment.customer_id,
              "status": sample_payment.status.value,
              "page": 1,
              "per_page": 10
          }

          response = await test_client.post("/api/v1/payments/search", json=search_data)

          assert response.status_code == 200
          data = response.json()

          assert "payments" in data
          assert "total" in data
          assert "page" in data
          assert "per_page" in data
          assert "total_pages" in data
          assert len(data["payments"]) >= 1
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:358
_ ERROR at setup of TestPaymentEndpoints.test_search_payments_with_date_range _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 380
      @pytest.mark.asyncio
      async def test_search_payments_with_date_range(self, test_client: AsyncClient, sample_payment):
          """Test POST /payments/search endpoint with date range."""
          from datetime import datetime, timedelta

          start_date = datetime.utcnow() - timedelta(days=1)
          end_date = datetime.utcnow() + timedelta(days=1)

          search_data = {
              "start_date": start_date.isoformat(),
              "end_date": end_date.isoformat(),
              "page": 1,
              "per_page": 10
          }

          response = await test_client.post("/api/v1/payments/search", json=search_data)

          assert response.status_code == 200
          data = response.json()

          assert "payments" in data
          assert "total" in data
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:380
_ ERROR at setup of TestPaymentEndpoints.test_get_payment_status_history_endpoint _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 403
      @pytest.mark.asyncio
      async def test_get_payment_status_history_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test GET /payments/{id}/status-history endpoint."""
          response = await test_client.get(f"/api/v1/payments/{sample_payment.id}/status-history")

          assert response.status_code == 200
          data = response.json()

          # Should return a list (may be empty if no advanced features)
          assert isinstance(data, list)
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:403
__ ERROR at setup of TestPaymentEndpoints.test_get_payment_metadata_endpoint __
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 414
      @pytest.mark.asyncio
      async def test_get_payment_metadata_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test GET /payments/{id}/metadata endpoint."""
          response = await test_client.get(f"/api/v1/payments/{sample_payment.id}/metadata")

          assert response.status_code == 200
          data = response.json()

          # Should return a dictionary (may be empty if no advanced features)
          assert isinstance(data, dict)
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:414
_ ERROR at setup of TestPaymentEndpoints.test_update_payment_metadata_endpoint _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 425
      @pytest.mark.asyncio
      async def test_update_payment_metadata_endpoint(self, test_client: AsyncClient, sample_payment):
          """Test PUT /payments/{id}/metadata endpoint."""
          metadata = {
              "api_test": True,
              "updated_at": "2024-01-01T00:00:00Z",
              "source": "api_endpoint_test"
          }

          response = await test_client.put(
              f"/api/v1/payments/{sample_payment.id}/metadata",
              json=metadata
          )

          assert response.status_code == 200
          data = response.json()

          assert "message" in data
          assert data["message"] == "Metadata updated successfully"
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:425
_ ERROR at setup of TestPaymentEndpoints.test_get_circuit_breaker_metrics_endpoint _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 445
      @pytest.mark.asyncio
      async def test_get_circuit_breaker_metrics_endpoint(self, test_client: AsyncClient):
          """Test GET /payments/metrics/circuit-breakers endpoint."""
          response = await test_client.get("/api/v1/payments/metrics/circuit-breakers")

          assert response.status_code == 200
          data = response.json()

          # Should return a dictionary (may be empty if no advanced features)
          assert isinstance(data, dict)
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:445
_ ERROR at setup of TestPaymentEndpointsErrorHandling.test_invalid_json_request _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 460
      @pytest.mark.asyncio
      async def test_invalid_json_request(self, test_client: AsyncClient):
          """Test endpoint with invalid JSON request."""
          response = await test_client.post(
              "/api/v1/payments/",
              content="invalid json",
              headers={"Content-Type": "application/json"}
          )

          assert response.status_code == 422  # Unprocessable Entity
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:460
_ ERROR at setup of TestPaymentEndpointsErrorHandling.test_missing_required_fields _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 471
      @pytest.mark.asyncio
      async def test_missing_required_fields(self, test_client: AsyncClient):
          """Test endpoint with missing required fields."""
          incomplete_data = {
              "amount": "10.00",
              "currency": "USD"
              # Missing required fields
          }

          response = await test_client.post("/api/v1/payments/", json=incomplete_data)

          assert response.status_code == 422
          data = response.json()
          assert "detail" in data
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:471
_ ERROR at setup of TestPaymentEndpointsErrorHandling.test_invalid_uuid_format _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 486
      @pytest.mark.asyncio
      async def test_invalid_uuid_format(self, test_client: AsyncClient):
          """Test endpoint with invalid UUID format."""
          invalid_uuid = "not-a-uuid"
          response = await test_client.get(f"/api/v1/payments/{invalid_uuid}")

          # Should treat as external ID and return 404 if not found
          assert response.status_code == 404
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:486
_ ERROR at setup of TestPaymentEndpointsErrorHandling.test_large_request_body _
file C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py, line 495
      @pytest.mark.asyncio
      async def test_large_request_body(self, test_client: AsyncClient):
          """Test endpoint with large request body."""
          large_metadata = {"data": "x" * 10000}  # Large metadata

          payment_data = {
              "amount": "10.00",
              "currency": "USD",
              "payment_method": PaymentMethod.CREDIT_CARD.value,
              "customer_id": "cust_large_test",
              "customer_email": "large@example.com",
              "customer_name": "Large Test Customer",
              "card_token": "tok_large_test",
              "description": "Large test payment",
              "metadata": large_metadata,
              "is_test": True
          }

          response = await test_client.post("/api/v1/payments/", json=payment_data)

          # Should handle large requests gracefully
          assert response.status_code in [201, 413, 422]  # Created, Payload Too Large, or validation error
E       fixture 'test_client' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, faker, mock_advanced_features, mock_authorize_net_client, mock_cache_client, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_audit_log_data, sample_billing_address, sample_credit_card, sample_payment, sample_payment_cancel_request, sample_payment_create_request, sample_payment_data, sample_payment_refund_request, sample_payment_update_request, sample_webhook_data, session_mocker, test_db_session, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\PundlikR\Documents\hackathon\EasyPay\tests\integration\test_api_endpoints.py:495
================================== FAILURES ===================================
___________ TestPaymentIntegration.test_complete_payment_lifecycle ____________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001BA2F38D690>
payment_data = {'amount': Decimal('100.00'), 'card_token': 'tok_integration_test', 'currency': 'USD', 'customer_email': 'integration@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
>           self.session.add(payment)
E           AttributeError: 'async_generator' object has no attribute 'add'

src\core\repositories\payment_repository.py:42: AttributeError

During handling of the above exception, another exception occurred:

self = <src.core.services.payment_service.PaymentService object at 0x000001BA2F38CC90>
payment_data = PaymentCreateRequest(amount=Decimal('100.00'), currency='USD', payment_method='credit_card', customer_id='cust_integra...ion_test', description='Integration test payment', metadata={'test_type': 'lifecycle', 'step': 'create'}, is_test=True)
correlation_id = 'corr_1c8b1cd9ebf8'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
>           payment = await self.payment_repository.create(payment_dict)

src\core\services\payment_service.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001BA2F38D690>
payment_data = {'amount': Decimal('100.00'), 'card_token': 'tok_integration_test', 'currency': 'USD', 'customer_email': 'integration@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
            self.session.add(payment)
            await self.session.commit()
            await self.session.refresh(payment)
            return payment
        except Exception as e:
>           await self.session.rollback()
E           AttributeError: 'async_generator' object has no attribute 'rollback'

src\core\repositories\payment_repository.py:47: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_integration.TestPaymentIntegration object at 0x000001BA2F281090>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001BA2F38CC90>

    @pytest.mark.asyncio
    async def test_complete_payment_lifecycle(self, payment_service):
        """Test complete payment lifecycle: create -> update -> refund -> cancel."""
        # Create payment
        create_request = PaymentCreateRequest(
            amount=Decimal("100.00"),
            currency="USD",
            payment_method=PaymentMethod.CREDIT_CARD.value,
            customer_id="cust_integration_test",
            customer_email="integration@example.com",
            customer_name="Integration Test Customer",
            card_token="tok_integration_test",
            description="Integration test payment",
            metadata={"test_type": "lifecycle", "step": "create"},
            is_test=True
        )
    
>       payment = await payment_service.create_payment(create_request)

tests\integration\test_payment_integration.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.services.payment_service.PaymentService object at 0x000001BA2F38CC90>
payment_data = PaymentCreateRequest(amount=Decimal('100.00'), currency='USD', payment_method='credit_card', customer_id='cust_integra...ion_test', description='Integration test payment', metadata={'test_type': 'lifecycle', 'step': 'create'}, is_test=True)
correlation_id = 'corr_1c8b1cd9ebf8'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
            payment = await self.payment_repository.create(payment_dict)
    
            # Track status change if advanced features are available
            if self.advanced_features:
                await self.advanced_features.track_payment_status_change(
                    str(payment.id),
                    "none",
                    PaymentStatus.PENDING.value,
                    "Payment created"
                )
    
                # Store metadata if provided
                if payment_data.metadata:
                    await self.advanced_features.store_payment_metadata(
                        str(payment.id),
                        payment_data.metadata
                    )
    
            # Log audit trail - temporarily commented out for debugging
            # await self.audit_repository.create({
            #     "payment_id": payment.id,
            #     "action": "payment_created",
            #     "level": "info",
            #     "message": f"Payment created for amount {payment_data.amount} {payment_data.currency}",
            #     "entity_type": "payment",
            #     "entity_id": str(payment.id),
            #     "audit_metadata": {
            #         "amount": str(payment_data.amount),
            #         "currency": payment_data.currency,
            #         "payment_method": payment_data.payment_method,
            #         "customer_id": payment_data.customer_id,
            #         "correlation_id": correlation_id
            #     },
            #     "user_id": None,  # Will be set when authentication is implemented
            #     "ip_address": None,
            #     "user_agent": None
            # })
    
            logger.info(f"Payment created successfully: {payment.id} [correlation_id: {correlation_id}]")
            return payment
    
        except ValidationError:
            raise
        except DatabaseError:
            raise
        except Exception as e:
            logger.error(f"Failed to create payment: {e}")
>           raise PaymentError(f"Failed to create payment: {str(e)}")
E           src.core.exceptions.PaymentError: Failed to create payment: 'async_generator' object has no attribute 'rollback'

src\core\services\payment_service.py:177: PaymentError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
------------------------------ Captured log call ------------------------------
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
__________ TestPaymentIntegration.test_payment_search_and_filtering ___________

self = <test_payment_integration.TestPaymentIntegration object at 0x000001BA2F281710>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001BA2F4BF390>

    @pytest.mark.asyncio
    async def test_payment_search_and_filtering(self, payment_service):
        """Test payment search and filtering capabilities."""
        # Create multiple payments with different attributes
        payments_data = [
            {
                "amount": Decimal("50.00"),
                "customer_id": "cust_search_1",
                "customer_email": "search1@example.com",
>               "status": PaymentStatus.COMPLETED,
                "description": "Search test payment 1"
            },
            {
                "amount": Decimal("75.00"),
                "customer_id": "cust_search_2",
                "customer_email": "search2@example.com",
                "status": PaymentStatus.PENDING,
                "description": "Search test payment 2"
            },
            {
                "amount": Decimal("25.00"),
                "customer_id": "cust_search_1",  # Same customer as first payment
                "customer_email": "search1@example.com",
                "status": PaymentStatus.COMPLETED,
                "description": "Search test payment 3"
            }
        ]

tests\integration\test_payment_integration.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <enum 'PaymentStatus'>, name = 'COMPLETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: COMPLETED

..\..\..\AppData\Local\Programs\Python\Python311\Lib\enum.py:786: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_______________ TestPaymentIntegration.test_payment_statistics ________________

self = <test_payment_integration.TestPaymentIntegration object at 0x000001BA2F281D90>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001BA2F31EA90>

    @pytest.mark.asyncio
    async def test_payment_statistics(self, payment_service):
        """Test payment statistics functionality."""
        # Create payments with different amounts and statuses
        test_payments = [
>           {"amount": Decimal("100.00"), "status": PaymentStatus.COMPLETED, "customer_id": "cust_stats_1"},
            {"amount": Decimal("200.00"), "status": PaymentStatus.COMPLETED, "customer_id": "cust_stats_1"},
            {"amount": Decimal("50.00"), "status": PaymentStatus.PENDING, "customer_id": "cust_stats_2"},
            {"amount": Decimal("75.00"), "status": PaymentStatus.COMPLETED, "customer_id": "cust_stats_2"},
            {"amount": Decimal("25.00"), "status": PaymentStatus.REFUNDED, "customer_id": "cust_stats_1"}
        ]

tests\integration\test_payment_integration.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <enum 'PaymentStatus'>, name = 'COMPLETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: COMPLETED

..\..\..\AppData\Local\Programs\Python\Python311\Lib\enum.py:786: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_____________ TestPaymentIntegration.test_payment_error_scenarios _____________

self = <test_payment_integration.TestPaymentIntegration object at 0x000001BA2F282450>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001BA2F44A490>

    @pytest.mark.asyncio
    async def test_payment_error_scenarios(self, payment_service):
        """Test various error scenarios in payment operations."""
        # Test creating payment with invalid data
>       with pytest.raises(ValidationError):
E       NameError: name 'ValidationError' is not defined

tests\integration\test_payment_integration.py:214: NameError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_________ TestPaymentIntegration.test_payment_external_id_operations __________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001BA2F583450>
payment_data = {'amount': Decimal('50.00'), 'card_token': 'tok_external_test', 'currency': 'USD', 'customer_email': 'external@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
>           self.session.add(payment)
E           AttributeError: 'async_generator' object has no attribute 'add'

src\core\repositories\payment_repository.py:42: AttributeError

During handling of the above exception, another exception occurred:

self = <src.core.services.payment_service.PaymentService object at 0x000001BA2F582ED0>
payment_data = PaymentCreateRequest(amount=Decimal('50.00'), currency='USD', payment_method='credit_card', customer_id='cust_external...al Test Customer', card_token='tok_external_test', description='External ID test payment', metadata=None, is_test=True)
correlation_id = 'corr_eb18798b77da'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
>           payment = await self.payment_repository.create(payment_dict)

src\core\services\payment_service.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001BA2F583450>
payment_data = {'amount': Decimal('50.00'), 'card_token': 'tok_external_test', 'currency': 'USD', 'customer_email': 'external@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
            self.session.add(payment)
            await self.session.commit()
            await self.session.refresh(payment)
            return payment
        except Exception as e:
>           await self.session.rollback()
E           AttributeError: 'async_generator' object has no attribute 'rollback'

src\core\repositories\payment_repository.py:47: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_integration.TestPaymentIntegration object at 0x000001BA2F282AD0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001BA2F582ED0>

    @pytest.mark.asyncio
    async def test_payment_external_id_operations(self, payment_service):
        """Test operations using external payment IDs."""
        # Create payment
        create_request = PaymentCreateRequest(
            amount=Decimal("50.00"),
            currency="USD",
            payment_method=PaymentMethod.CREDIT_CARD.value,
            customer_id="cust_external_test",
            customer_email="external@example.com",
            customer_name="External Test Customer",
            card_token="tok_external_test",
            description="External ID test payment",
            is_test=True
        )
    
>       payment = await payment_service.create_payment(create_request)

tests\integration\test_payment_integration.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.services.payment_service.PaymentService object at 0x000001BA2F582ED0>
payment_data = PaymentCreateRequest(amount=Decimal('50.00'), currency='USD', payment_method='credit_card', customer_id='cust_external...al Test Customer', card_token='tok_external_test', description='External ID test payment', metadata=None, is_test=True)
correlation_id = 'corr_eb18798b77da'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
            payment = await self.payment_repository.create(payment_dict)
    
            # Track status change if advanced features are available
            if self.advanced_features:
                await self.advanced_features.track_payment_status_change(
                    str(payment.id),
                    "none",
                    PaymentStatus.PENDING.value,
                    "Payment created"
                )
    
                # Store metadata if provided
                if payment_data.metadata:
                    await self.advanced_features.store_payment_metadata(
                        str(payment.id),
                        payment_data.metadata
                    )
    
            # Log audit trail - temporarily commented out for debugging
            # await self.audit_repository.create({
            #     "payment_id": payment.id,
            #     "action": "payment_created",
            #     "level": "info",
            #     "message": f"Payment created for amount {payment_data.amount} {payment_data.currency}",
            #     "entity_type": "payment",
            #     "entity_id": str(payment.id),
            #     "audit_metadata": {
            #         "amount": str(payment_data.amount),
            #         "currency": payment_data.currency,
            #         "payment_method": payment_data.payment_method,
            #         "customer_id": payment_data.customer_id,
            #         "correlation_id": correlation_id
            #     },
            #     "user_id": None,  # Will be set when authentication is implemented
            #     "ip_address": None,
            #     "user_agent": None
            # })
    
            logger.info(f"Payment created successfully: {payment.id} [correlation_id: {correlation_id}]")
            return payment
    
        except ValidationError:
            raise
        except DatabaseError:
            raise
        except Exception as e:
            logger.error(f"Failed to create payment: {e}")
>           raise PaymentError(f"Failed to create payment: {str(e)}")
E           src.core.exceptions.PaymentError: Failed to create payment: 'async_generator' object has no attribute 'rollback'

src\core\services\payment_service.py:177: PaymentError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
------------------------------ Captured log call ------------------------------
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
__________ TestPaymentIntegration.test_concurrent_payment_operations __________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001BA2F320390>
payment_data = {'amount': Decimal('10.00'), 'card_token': 'tok_cust_concurrent_0', 'currency': 'USD', 'customer_email': 'cust_concurrent_0@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
>           self.session.add(payment)
E           AttributeError: 'async_generator' object has no attribute 'add'

src\core\repositories\payment_repository.py:42: AttributeError

During handling of the above exception, another exception occurred:

self = <src.core.services.payment_service.PaymentService object at 0x000001BA2F320710>
payment_data = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_concurre...oken='tok_cust_concurrent_0', description='Concurrent test payment for cust_concurrent_0', metadata=None, is_test=True)
correlation_id = 'corr_45de78f98972'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
>           payment = await self.payment_repository.create(payment_dict)

src\core\services\payment_service.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001BA2F320390>
payment_data = {'amount': Decimal('10.00'), 'card_token': 'tok_cust_concurrent_0', 'currency': 'USD', 'customer_email': 'cust_concurrent_0@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
            self.session.add(payment)
            await self.session.commit()
            await self.session.refresh(payment)
            return payment
        except Exception as e:
>           await self.session.rollback()
E           AttributeError: 'async_generator' object has no attribute 'rollback'

src\core\repositories\payment_repository.py:47: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_integration.TestPaymentIntegration object at 0x000001BA2F283150>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001BA2F320710>

    @pytest.mark.asyncio
    async def test_concurrent_payment_operations(self, payment_service):
        """Test concurrent payment operations."""
        import asyncio
    
        # Create multiple payments concurrently
        async def create_payment(customer_id: str, amount: Decimal):
            create_request = PaymentCreateRequest(
                amount=amount,
                currency="USD",
                payment_method=PaymentMethod.CREDIT_CARD.value,
                customer_id=customer_id,
                customer_email=f"{customer_id}@example.com",
                customer_name="Concurrent Test Customer",
                card_token=f"tok_{customer_id}",
                description=f"Concurrent test payment for {customer_id}",
                is_test=True
            )
            return await payment_service.create_payment(create_request)
    
        # Create 5 payments concurrently
        tasks = [
            create_payment(f"cust_concurrent_{i}", Decimal(f"{10 + i * 10}.00"))
            for i in range(5)
        ]
    
>       payments = await asyncio.gather(*tasks)

tests\integration\test_payment_integration.py:322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\integration\test_payment_integration.py:314: in create_payment
    return await payment_service.create_payment(create_request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.services.payment_service.PaymentService object at 0x000001BA2F320710>
payment_data = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_concurre...oken='tok_cust_concurrent_0', description='Concurrent test payment for cust_concurrent_0', metadata=None, is_test=True)
correlation_id = 'corr_45de78f98972'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
            payment = await self.payment_repository.create(payment_dict)
    
            # Track status change if advanced features are available
            if self.advanced_features:
                await self.advanced_features.track_payment_status_change(
                    str(payment.id),
                    "none",
                    PaymentStatus.PENDING.value,
                    "Payment created"
                )
    
                # Store metadata if provided
                if payment_data.metadata:
                    await self.advanced_features.store_payment_metadata(
                        str(payment.id),
                        payment_data.metadata
                    )
    
            # Log audit trail - temporarily commented out for debugging
            # await self.audit_repository.create({
            #     "payment_id": payment.id,
            #     "action": "payment_created",
            #     "level": "info",
            #     "message": f"Payment created for amount {payment_data.amount} {payment_data.currency}",
            #     "entity_type": "payment",
            #     "entity_id": str(payment.id),
            #     "audit_metadata": {
            #         "amount": str(payment_data.amount),
            #         "currency": payment_data.currency,
            #         "payment_method": payment_data.payment_method,
            #         "customer_id": payment_data.customer_id,
            #         "correlation_id": correlation_id
            #     },
            #     "user_id": None,  # Will be set when authentication is implemented
            #     "ip_address": None,
            #     "user_agent": None
            # })
    
            logger.info(f"Payment created successfully: {payment.id} [correlation_id: {correlation_id}]")
            return payment
    
        except ValidationError:
            raise
        except DatabaseError:
            raise
        except Exception as e:
            logger.error(f"Failed to create payment: {e}")
>           raise PaymentError(f"Failed to create payment: {str(e)}")
E           src.core.exceptions.PaymentError: Failed to create payment: 'async_generator' object has no attribute 'rollback'

src\core\services\payment_service.py:177: PaymentError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
------------------------------ Captured log call ------------------------------
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
============================== warnings summary ===============================
src\infrastructure\database\base.py:7
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\infrastructure\database\base.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

src\api\v1\schemas\payment.py:41
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:41: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('amount')

src\api\v1\schemas\payment.py:50
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:50: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('currency')

src\api\v1\schemas\payment.py:89
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:89: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('amount')

src\api\v1\schemas\payment.py:234
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:234: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('end_date')

src\api\v1\schemas\webhook.py:30
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\webhook.py:30: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('url')

src\api\v1\schemas\webhook.py:37
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\webhook.py:37: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('event_types')

src\api\v1\schemas\webhook.py:192
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\webhook.py:192: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('end_date')

..\..\..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\fields.py:1093: 14 warnings
  C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\fields.py:1093: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warn(

..\..\..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\_internal\_config.py:323
  C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\_internal\_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform win32, python 3.11.9-final-0 -----------
Name                                                 Stmts   Miss  Cover   Missing
----------------------------------------------------------------------------------
src\api\v1\schemas\__init__.py                           3      0   100%
src\api\v1\schemas\payment.py                          104     15    86%   45, 47, 54, 92-94, 167, 172, 177-179, 237-240
src\api\v1\schemas\webhook.py                           80     14    82%   33-35, 40-55, 125, 133, 195-198
src\core\config.py                                      37      1    97%   81
src\core\exceptions.py                                  55     13    76%   31, 43, 55, 67, 79, 91, 115, 127, 151, 163, 173, 183, 195
src\core\models\__init__.py                              4      0   100%
src\core\models\audit_log.py                            61      4    93%   107, 123, 147, 169
src\core\models\payment.py                              70      6    91%   112, 117, 122, 127-129
src\core\models\webhook.py                              75     18    76%   100, 105, 113, 120-125, 129-133, 137-140
src\core\repositories\__init__.py                        4      0   100%
src\core\repositories\audit_log_repository.py          174    150    14%   39-47, 59-67, 106-170, 182-190, 202-210, 222-230, 242-250, 262-270, 287-348, 367-409, 440-459, 488-506, 518-530
src\core\repositories\payment_repository.py            150    122    19%   43-45, 48, 60-68, 80-88, 100-108, 124-142, 157-169, 198-252, 271-313, 332-381, 393-401, 413-421
src\core\repositories\webhook_repository.py            168    144    14%   24, 39-47, 59-67, 79-87, 103-121, 136-148, 179-235, 247-260, 269-283, 295-303, 315-323, 340-389, 410-420, 439-452, 469-482
src\core\services\__init__.py                            2      0   100%
src\core\services\advanced_payment_features.py         256    177    31%   57-64, 97-104, 113-128, 132, 136-138, 142-149, 153, 168, 172-189, 196-197, 202-213, 217-225, 229-233, 242, 247, 254-255, 260-276, 280-288, 295-296, 300-305, 309-317, 321-326, 333-334, 338-360, 365-368, 375-391, 395-419, 423-429, 433-439, 444, 448, 452, 456, 460, 464, 468
src\core\services\payment_service.py                   275    201    27%   70, 133-169, 172, 174, 193-209, 225-241, 259-306, 331-446, 467-573, 602-623, 642-658, 677-693, 707, 710, 714, 718, 725, 738-739, 753-762, 778-779, 791-794, 806-809, 820-823, 835-838, 847-850, 854-855, 859, 863
src\infrastructure\cache.py                             70     49    30%   29-47, 63, 75-86, 93, 108-112, 134-141, 156-160, 175-179, 195-198, 214-217
src\infrastructure\database\__init__.py                  6      0   100%
src\infrastructure\database\base.py                      2      0   100%
src\infrastructure\database\data_validator.py          310    251    19%   51-55, 67-69, 73, 81, 179, 226, 309-380, 399-418, 430-475, 486-519, 530-548, 555-558, 562-566, 570-574, 578-584, 588-591, 595-597, 601-604, 608-610, 614-616, 620-623, 627-629, 633-642, 646-650, 654-658, 662-668, 672-674, 678-684, 688-691, 695, 699-703, 707-711, 715-721, 725-731, 735-737, 741-743, 747-749, 753-755, 759-765, 769-775, 779-785
src\infrastructure\database\error_handler.py           178    130    27%   80-90, 102-106, 110, 122, 196-223, 233-266, 278-305, 315-334, 344-363, 373, 385, 397, 425-458, 470-483, 490-494, 506-542, 551-572, 587-600, 607-608, 620-638
src\infrastructure\database\migration_manager.py       224    180    20%   74-84, 96-102, 111-147, 159-170, 182-209, 228-251, 260-287, 296-308, 320-332, 348-391, 406-432, 441-469, 484-495, 504-542, 551-577
src\infrastructure\database\transaction_manager.py     141    108    23%   47-48, 72-126, 139-149, 173-178, 200-213, 235-256, 278-293, 305-313, 325-353, 374-377, 392-397, 409-415
src\integrations\authorize_net\__init__.py               4      0   100%
src\integrations\authorize_net\client.py               129    104    19%   42-43, 51-61, 65-67, 79-125, 151-192, 218-259, 281-306, 330-359, 379-401, 416-435, 450-486, 490, 494, 498
src\integrations\authorize_net\exceptions.py            30     17    43%   19, 36-41, 54-65, 77-86, 97-102
src\integrations\authorize_net\models.py                94     31    67%   40-53, 59-76, 103-108
src\main.py                                             67     67     0%   4-205
----------------------------------------------------------------------------------
TOTAL                                                 2773   1802    35%
Coverage HTML written to dir htmlcov_integration
Coverage XML written to file coverage_integration.xml

=========================== short test summary info ===========================
FAILED tests/integration/test_payment_integration.py::TestPaymentIntegration::test_complete_payment_lifecycle
FAILED tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_search_and_filtering
FAILED tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_statistics
FAILED tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_error_scenarios
FAILED tests/integration/test_payment_integration.py::TestPaymentIntegration::test_payment_external_id_operations
FAILED tests/integration/test_payment_integration.py::TestPaymentIntegration::test_concurrent_payment_operations
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_create_payment_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_create_payment_with_correlation_id
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_create_payment_validation_error
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_by_uuid
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_by_external_id
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_not_found
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_with_filters
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_pagination
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_list_payments_invalid_status
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_by_external_id
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_validation_error
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_refund_payment_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_refund_payment_with_correlation_id
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_refund_payment_not_refundable
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_cancel_payment_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_cancel_payment_not_cancellable
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_search_payments_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_search_payments_with_date_range
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_status_history_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_payment_metadata_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_update_payment_metadata_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpoints::test_get_circuit_breaker_metrics_endpoint
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_invalid_json_request
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_missing_required_fields
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_invalid_uuid_format
ERROR tests/integration/test_api_endpoints.py::TestPaymentEndpointsErrorHandling::test_large_request_body
================== 6 failed, 23 warnings, 28 errors in 3.57s ==================

=== STDERR ===
