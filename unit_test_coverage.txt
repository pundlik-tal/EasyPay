=== Unit Tests with Coverage ===
Exit Code: 1
Command: C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\python.exe -m pytest tests/unit/ --cov=src --cov-report=term-missing --cov-report=html:htmlcov --cov-report=xml --cov-fail-under=80 -v

=== STDOUT ===
============================= test session starts =============================
platform win32 -- Python 3.11.9, pytest-7.4.3, pluggy-1.6.0 -- C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\PundlikR\Documents\hackathon\EasyPay
configfile: pytest.ini
plugins: anyio-3.7.1, Faker-37.5.3, langsmith-0.4.10, asyncio-0.21.1, cov-4.1.0, mock-3.12.0
asyncio: mode=Mode.STRICT
collecting ... collected 59 items

tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_initialization_with_credentials ERROR [  1%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_initialization_with_settings FAILED [  3%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_get_api_url_sandbox FAILED [  5%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_get_api_url_production FAILED [  6%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_test_authentication_success ERROR [  8%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_test_authentication_failure ERROR [ 10%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_test_authentication_network_error ERROR [ 11%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_charge_credit_card_success ERROR [ 13%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_charge_credit_card_with_order_info ERROR [ 15%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_charge_credit_card_failure ERROR [ 16%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_authorize_only_success ERROR [ 18%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_capture_success ERROR [ 20%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_capture_without_amount ERROR [ 22%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_refund_success ERROR [ 23%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_void_transaction_success ERROR [ 25%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_make_request_success ERROR [ 27%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_make_request_http_error ERROR [ 28%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_make_request_json_decode_error ERROR [ 30%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_success ERROR [ 32%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_declined ERROR [ 33%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_error ERROR [ 35%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_no_messages ERROR [ 37%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_context_manager ERROR [ 38%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_close ERROR [ 40%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_parse_transaction_response_empty_message_list ERROR [ 42%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_parse_transaction_response_missing_transaction_response ERROR [ 44%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_make_request_unexpected_error ERROR [ 45%]
tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_charge_credit_card_unexpected_error ERROR [ 47%]
tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_success FAILED [ 49%]
tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_with_advanced_features FAILED [ 50%]
tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_validation_error_amount FAILED [ 52%]
tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_validation_error_currency FAILED [ 54%]
tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_validation_error_email PASSED [ 55%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_success FAILED [ 57%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_not_found FAILED [ 59%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_by_external_id_success FAILED [ 61%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_by_external_id_not_found FAILED [ 62%]
tests/unit/test_payment_service.py::TestPaymentService::test_update_payment_success FAILED [ 64%]
tests/unit/test_payment_service.py::TestPaymentService::test_update_payment_validation_error FAILED [ 66%]
tests/unit/test_payment_service.py::TestPaymentService::test_refund_payment_success FAILED [ 67%]
tests/unit/test_payment_service.py::TestPaymentService::test_refund_payment_not_refundable FAILED [ 69%]
tests/unit/test_payment_service.py::TestPaymentService::test_refund_payment_amount_exceeds_remaining FAILED [ 71%]
tests/unit/test_payment_service.py::TestPaymentService::test_cancel_payment_success FAILED [ 72%]
tests/unit/test_payment_service.py::TestPaymentService::test_cancel_payment_not_cancellable FAILED [ 74%]
tests/unit/test_payment_service.py::TestPaymentService::test_list_payments_success FAILED [ 76%]
tests/unit/test_payment_service.py::TestPaymentService::test_list_payments_with_filters FAILED [ 77%]
tests/unit/test_payment_service.py::TestPaymentService::test_search_payments_success FAILED [ 79%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_stats_success FAILED [ 81%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_status_history_no_advanced_features FAILED [ 83%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_metadata_no_advanced_features FAILED [ 84%]
tests/unit/test_payment_service.py::TestPaymentService::test_update_payment_metadata_no_advanced_features FAILED [ 86%]
tests/unit/test_payment_service.py::TestPaymentService::test_search_payments_advanced_no_advanced_features PASSED [ 88%]
tests/unit/test_payment_service.py::TestPaymentService::test_get_circuit_breaker_metrics_no_advanced_features PASSED [ 89%]
tests/unit/test_payment_service.py::TestPaymentService::test_payment_service_context_manager PASSED [ 91%]
tests/unit/test_payment_service.py::TestPaymentService::test_payment_service_close PASSED [ 93%]
tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_payment_data_amount_too_large FAILED [ 94%]
tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_payment_data_invalid_payment_method PASSED [ 96%]
tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_refund_eligibility_success FAILED [ 98%]
tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_cancellation_eligibility_success FAILED [100%]

=================================== ERRORS ====================================
_ ERROR at setup of TestAuthorizeNetClient.test_client_initialization_with_credentials _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D2506387D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
__ ERROR at setup of TestAuthorizeNetClient.test_test_authentication_success __

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063A410>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
__ ERROR at setup of TestAuthorizeNetClient.test_test_authentication_failure __

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063AB90>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_test_authentication_network_error _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063B2D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
__ ERROR at setup of TestAuthorizeNetClient.test_charge_credit_card_success ___

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063BA10>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_charge_credit_card_with_order_info _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063C190>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
__ ERROR at setup of TestAuthorizeNetClient.test_charge_credit_card_failure ___

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063A0D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
____ ERROR at setup of TestAuthorizeNetClient.test_authorize_only_success _____

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063C4D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
________ ERROR at setup of TestAuthorizeNetClient.test_capture_success ________

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063C890>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
____ ERROR at setup of TestAuthorizeNetClient.test_capture_without_amount _____

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063CC10>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
________ ERROR at setup of TestAuthorizeNetClient.test_refund_success _________

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063D090>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
___ ERROR at setup of TestAuthorizeNetClient.test_void_transaction_success ____

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063D750>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_____ ERROR at setup of TestAuthorizeNetClient.test_make_request_success ______

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063DE10>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
____ ERROR at setup of TestAuthorizeNetClient.test_make_request_http_error ____

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063E490>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_make_request_json_decode_error _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063EB10>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_parse_transaction_response_success _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063F290>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_parse_transaction_response_declined _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25063FA10>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_parse_transaction_response_error _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D2506401D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClient.test_parse_transaction_response_no_messages _

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D250640950>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
____ ERROR at setup of TestAuthorizeNetClient.test_client_context_manager _____

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D250641090>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_________ ERROR at setup of TestAuthorizeNetClient.test_client_close __________

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D250641810>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True,
            api_url="https://apitest.authorize.net/xml/v1/request.api"
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:31: ValidationError
_ ERROR at setup of TestAuthorizeNetClientEdgeCases.test_parse_transaction_response_empty_message_list _

self = <test_authorize_net_client.TestAuthorizeNetClientEdgeCases object at 0x000001D2506420D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:387: ValidationError
_ ERROR at setup of TestAuthorizeNetClientEdgeCases.test_parse_transaction_response_missing_transaction_response _

self = <test_authorize_net_client.TestAuthorizeNetClientEdgeCases object at 0x000001D250642810>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:387: ValidationError
_ ERROR at setup of TestAuthorizeNetClientEdgeCases.test_make_request_unexpected_error _

self = <test_authorize_net_client.TestAuthorizeNetClientEdgeCases object at 0x000001D250642F50>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:387: ValidationError
_ ERROR at setup of TestAuthorizeNetClientEdgeCases.test_charge_credit_card_unexpected_error _

self = <test_authorize_net_client.TestAuthorizeNetClientEdgeCases object at 0x000001D2506436D0>

    @pytest.fixture
    def credentials(self):
        """Create test credentials."""
>       return AuthorizeNetCredentials(
            api_login_id="test_login_id",
            transaction_key="test_transaction_key",
            sandbox=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E       transaction_key
E         String should have at most 16 characters [type=string_too_long, input_value='test_transaction_key', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

tests\unit\test_authorize_net_client.py:387: ValidationError
================================== FAILURES ===================================
_______ TestAuthorizeNetClient.test_client_initialization_with_settings _______

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D25052EDD0>
mock_settings = <MagicMock name='settings' id='2002802879760'>

    @patch('src.integrations.authorize_net.client.settings')
    def test_client_initialization_with_settings(self, mock_settings):
        """Test client initialization with settings."""
        mock_settings.AUTHORIZE_NET_API_LOGIN_ID = "settings_login_id"
        mock_settings.AUTHORIZE_NET_TRANSACTION_KEY = "settings_transaction_key"
        mock_settings.AUTHORIZE_NET_SANDBOX = True
        mock_settings.get_authorize_net_url.return_value = "https://apitest.authorize.net/xml/v1/request.api"
    
>       client = AuthorizeNetClient()

tests\unit\test_authorize_net_client.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.integrations.authorize_net.client.AuthorizeNetClient object at 0x000001D2505AA110>
credentials = None

    def __init__(self, credentials: Optional[AuthorizeNetCredentials] = None):
        """
        Initialize Authorize.net client.
    
        Args:
            credentials: Authorize.net credentials. If None, uses settings.
        """
        if credentials:
            self.credentials = credentials
            self.api_url = credentials.api_url or self._get_api_url(credentials.sandbox)
        else:
>           self.credentials = AuthorizeNetCredentials(
                api_login_id=settings.AUTHORIZE_NET_API_LOGIN_ID,
                transaction_key=settings.AUTHORIZE_NET_TRANSACTION_KEY,
                sandbox=settings.AUTHORIZE_NET_SANDBOX,
                api_url=settings.get_authorize_net_url()
            )
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E           transaction_key
E             String should have at most 16 characters [type=string_too_long, input_value='settings_transaction_key', input_type=str]
E               For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

src\integrations\authorize_net\client.py:45: ValidationError
_______________ TestAuthorizeNetClient.test_get_api_url_sandbox _______________

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D250639510>

    def test_get_api_url_sandbox(self):
        """Test API URL generation for sandbox."""
>       client = AuthorizeNetClient()

tests\unit\test_authorize_net_client.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.integrations.authorize_net.client.AuthorizeNetClient object at 0x000001D2509B73D0>
credentials = None

    def __init__(self, credentials: Optional[AuthorizeNetCredentials] = None):
        """
        Initialize Authorize.net client.
    
        Args:
            credentials: Authorize.net credentials. If None, uses settings.
        """
        if credentials:
            self.credentials = credentials
            self.api_url = credentials.api_url or self._get_api_url(credentials.sandbox)
        else:
>           self.credentials = AuthorizeNetCredentials(
                api_login_id=settings.AUTHORIZE_NET_API_LOGIN_ID,
                transaction_key=settings.AUTHORIZE_NET_TRANSACTION_KEY,
                sandbox=settings.AUTHORIZE_NET_SANDBOX,
                api_url=settings.get_authorize_net_url()
            )
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E           transaction_key
E             String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
E               For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

src\integrations\authorize_net\client.py:45: ValidationError
_____________ TestAuthorizeNetClient.test_get_api_url_production ______________

self = <test_authorize_net_client.TestAuthorizeNetClient object at 0x000001D250639C90>

    def test_get_api_url_production(self):
        """Test API URL generation for production."""
>       client = AuthorizeNetClient()

tests\unit\test_authorize_net_client.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.integrations.authorize_net.client.AuthorizeNetClient object at 0x000001D250A80590>
credentials = None

    def __init__(self, credentials: Optional[AuthorizeNetCredentials] = None):
        """
        Initialize Authorize.net client.
    
        Args:
            credentials: Authorize.net credentials. If None, uses settings.
        """
        if credentials:
            self.credentials = credentials
            self.api_url = credentials.api_url or self._get_api_url(credentials.sandbox)
        else:
>           self.credentials = AuthorizeNetCredentials(
                api_login_id=settings.AUTHORIZE_NET_API_LOGIN_ID,
                transaction_key=settings.AUTHORIZE_NET_TRANSACTION_KEY,
                sandbox=settings.AUTHORIZE_NET_SANDBOX,
                api_url=settings.get_authorize_net_url()
            )
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for AuthorizeNetCredentials
E           transaction_key
E             String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
E               For further information visit https://errors.pydantic.dev/2.11/v/string_too_long

src\integrations\authorize_net\client.py:45: ValidationError
_______________ TestPaymentService.test_create_payment_success ________________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250A89290>
payment_data = {'amount': Decimal('10.00'), 'card_token': 'tok_123456789', 'currency': 'USD', 'customer_email': 'test@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
>           self.session.add(payment)
E           AttributeError: 'async_generator' object has no attribute 'add'

src\core\repositories\payment_repository.py:42: AttributeError

During handling of the above exception, another exception occurred:

self = <src.core.services.payment_service.PaymentService object at 0x000001D250A889D0>
payment_data = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_123', cu..._token='tok_123456789', description='Test payment', metadata={'order_id': 'order_123', 'source': 'test'}, is_test=True)
correlation_id = 'corr_3d885a852693'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
>           payment = await self.payment_repository.create(payment_dict)

src\core\services\payment_service.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250A89290>
payment_data = {'amount': Decimal('10.00'), 'card_token': 'tok_123456789', 'currency': 'USD', 'customer_email': 'test@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
            self.session.add(payment)
            await self.session.commit()
            await self.session.refresh(payment)
            return payment
        except Exception as e:
>           await self.session.rollback()
E           AttributeError: 'async_generator' object has no attribute 'rollback'

src\core\repositories\payment_repository.py:47: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_service.TestPaymentService object at 0x000001D2508DB410>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250A889D0>
sample_payment_create_request = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_123', cu..._token='tok_123456789', description='Test payment', metadata={'order_id': 'order_123', 'source': 'test'}, is_test=True)

    @pytest.mark.asyncio
    async def test_create_payment_success(self, payment_service, sample_payment_create_request):
        """Test successful payment creation."""
        with patch.object(payment_service, 'advanced_features', None):
>           payment = await payment_service.create_payment(sample_payment_create_request)

tests\unit\test_payment_service.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.services.payment_service.PaymentService object at 0x000001D250A889D0>
payment_data = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_123', cu..._token='tok_123456789', description='Test payment', metadata={'order_id': 'order_123', 'source': 'test'}, is_test=True)
correlation_id = 'corr_3d885a852693'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
            payment = await self.payment_repository.create(payment_dict)
    
            # Track status change if advanced features are available
            if self.advanced_features:
                await self.advanced_features.track_payment_status_change(
                    str(payment.id),
                    "none",
                    PaymentStatus.PENDING.value,
                    "Payment created"
                )
    
                # Store metadata if provided
                if payment_data.metadata:
                    await self.advanced_features.store_payment_metadata(
                        str(payment.id),
                        payment_data.metadata
                    )
    
            # Log audit trail - temporarily commented out for debugging
            # await self.audit_repository.create({
            #     "payment_id": payment.id,
            #     "action": "payment_created",
            #     "level": "info",
            #     "message": f"Payment created for amount {payment_data.amount} {payment_data.currency}",
            #     "entity_type": "payment",
            #     "entity_id": str(payment.id),
            #     "audit_metadata": {
            #         "amount": str(payment_data.amount),
            #         "currency": payment_data.currency,
            #         "payment_method": payment_data.payment_method,
            #         "customer_id": payment_data.customer_id,
            #         "correlation_id": correlation_id
            #     },
            #     "user_id": None,  # Will be set when authentication is implemented
            #     "ip_address": None,
            #     "user_agent": None
            # })
    
            logger.info(f"Payment created successfully: {payment.id} [correlation_id: {correlation_id}]")
            return payment
    
        except ValidationError:
            raise
        except DatabaseError:
            raise
        except Exception as e:
            logger.error(f"Failed to create payment: {e}")
>           raise PaymentError(f"Failed to create payment: {str(e)}")
E           src.core.exceptions.PaymentError: Failed to create payment: 'async_generator' object has no attribute 'rollback'

src\core\services\payment_service.py:177: PaymentError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
------------------------------ Captured log call ------------------------------
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
________ TestPaymentService.test_create_payment_with_advanced_features ________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250C5A850>
payment_data = {'amount': Decimal('10.00'), 'card_token': 'tok_123456789', 'currency': 'USD', 'customer_email': 'test@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
>           self.session.add(payment)
E           AttributeError: 'async_generator' object has no attribute 'add'

src\core\repositories\payment_repository.py:42: AttributeError

During handling of the above exception, another exception occurred:

self = <src.core.services.payment_service.PaymentService object at 0x000001D250C5AAD0>
payment_data = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_123', cu..._token='tok_123456789', description='Test payment', metadata={'order_id': 'order_123', 'source': 'test'}, is_test=True)
correlation_id = 'corr_092320d9c269'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
>           payment = await self.payment_repository.create(payment_dict)

src\core\services\payment_service.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250C5A850>
payment_data = {'amount': Decimal('10.00'), 'card_token': 'tok_123456789', 'currency': 'USD', 'customer_email': 'test@example.com', ...}

    async def create(self, payment_data: Dict[str, Any]) -> Payment:
        """
        Create a new payment record.
    
        Args:
            payment_data: Dictionary containing payment data
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            DatabaseError: If creation fails
        """
        try:
            payment = Payment(**payment_data)
            self.session.add(payment)
            await self.session.commit()
            await self.session.refresh(payment)
            return payment
        except Exception as e:
>           await self.session.rollback()
E           AttributeError: 'async_generator' object has no attribute 'rollback'

src\core\repositories\payment_repository.py:47: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_service.TestPaymentService object at 0x000001D2508DBA90>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C5AAD0>
sample_payment_create_request = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_123', cu..._token='tok_123456789', description='Test payment', metadata={'order_id': 'order_123', 'source': 'test'}, is_test=True)
mock_advanced_features = <AsyncMock id='2002809890768'>

    @pytest.mark.asyncio
    async def test_create_payment_with_advanced_features(self, payment_service, sample_payment_create_request, mock_advanced_features):
        """Test payment creation with advanced features."""
        payment_service.advanced_features = mock_advanced_features
    
>       payment = await payment_service.create_payment(sample_payment_create_request)

tests\unit\test_payment_service.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.services.payment_service.PaymentService object at 0x000001D250C5AAD0>
payment_data = PaymentCreateRequest(amount=Decimal('10.00'), currency='USD', payment_method='credit_card', customer_id='cust_123', cu..._token='tok_123456789', description='Test payment', metadata={'order_id': 'order_123', 'source': 'test'}, is_test=True)
correlation_id = 'corr_092320d9c269'

    async def create_payment(self, payment_data: PaymentCreateRequest,
                           correlation_id: str = None) -> Payment:
        """
        Create a new payment with advanced features.
    
        Args:
            payment_data: Payment creation request data
            correlation_id: Optional correlation ID for request tracking
    
        Returns:
            Payment: Created payment instance
    
        Raises:
            ValidationError: If payment data is invalid
            PaymentError: If payment creation fails
            ExternalServiceError: If Authorize.net processing fails
        """
        try:
            # Generate correlation ID if not provided
            if not correlation_id:
                correlation_id = self.advanced_features.correlation_manager.generate_correlation_id() if self.advanced_features else f"corr_{uuid.uuid4().hex[:12]}"
    
            logger.info(f"Creating payment for amount {payment_data.amount} {payment_data.currency} [correlation_id: {correlation_id}]")
    
            # Validate payment data
            await self._validate_payment_data(payment_data)
    
            # Generate external ID
            external_id = f"pay_{uuid.uuid4().hex[:12]}"
    
            # Prepare payment data for database
            payment_dict = {
                "external_id": external_id,
                "amount": payment_data.amount,
                "currency": payment_data.currency,
                "status": PaymentStatus.PENDING,
                "payment_method": payment_data.payment_method,
                "customer_id": payment_data.customer_id,
                "customer_email": payment_data.customer_email,
                "customer_name": payment_data.customer_name,
                "card_token": payment_data.card_token,
                "description": payment_data.description,
                "payment_metadata": payment_data.metadata,
                "is_test": payment_data.is_test,
                "is_live": not payment_data.is_test
            }
    
            # Create payment in database
            payment = await self.payment_repository.create(payment_dict)
    
            # Track status change if advanced features are available
            if self.advanced_features:
                await self.advanced_features.track_payment_status_change(
                    str(payment.id),
                    "none",
                    PaymentStatus.PENDING.value,
                    "Payment created"
                )
    
                # Store metadata if provided
                if payment_data.metadata:
                    await self.advanced_features.store_payment_metadata(
                        str(payment.id),
                        payment_data.metadata
                    )
    
            # Log audit trail - temporarily commented out for debugging
            # await self.audit_repository.create({
            #     "payment_id": payment.id,
            #     "action": "payment_created",
            #     "level": "info",
            #     "message": f"Payment created for amount {payment_data.amount} {payment_data.currency}",
            #     "entity_type": "payment",
            #     "entity_id": str(payment.id),
            #     "audit_metadata": {
            #         "amount": str(payment_data.amount),
            #         "currency": payment_data.currency,
            #         "payment_method": payment_data.payment_method,
            #         "customer_id": payment_data.customer_id,
            #         "correlation_id": correlation_id
            #     },
            #     "user_id": None,  # Will be set when authentication is implemented
            #     "ip_address": None,
            #     "user_agent": None
            # })
    
            logger.info(f"Payment created successfully: {payment.id} [correlation_id: {correlation_id}]")
            return payment
    
        except ValidationError:
            raise
        except DatabaseError:
            raise
        except Exception as e:
            logger.error(f"Failed to create payment: {e}")
>           raise PaymentError(f"Failed to create payment: {str(e)}")
E           src.core.exceptions.PaymentError: Failed to create payment: 'async_generator' object has no attribute 'rollback'

src\core\services\payment_service.py:177: PaymentError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
------------------------------ Captured log call ------------------------------
ERROR    src.core.services.payment_service:payment_service.py:176 Failed to create payment: 'async_generator' object has no attribute 'rollback'
_______ TestPaymentService.test_create_payment_validation_error_amount ________

self = <test_payment_service.TestPaymentService object at 0x000001D2508E0190>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C360D0>

    @pytest.mark.asyncio
    async def test_create_payment_validation_error_amount(self, payment_service):
        """Test payment creation with invalid amount."""
>       invalid_request = PaymentCreateRequest(
            amount=Decimal("0"),  # Invalid amount
            currency="USD",
            payment_method=PaymentMethod.CREDIT_CARD.value,
            customer_id="cust_123",
            customer_email="test@example.com",
            customer_name="Test Customer",
            card_token="tok_123",
            description="Test payment",
            is_test=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for PaymentCreateRequest
E       amount
E         Input should be greater than 0 [type=greater_than, input_value=Decimal('0'), input_type=Decimal]
E           For further information visit https://errors.pydantic.dev/2.11/v/greater_than

tests\unit\test_payment_service.py:68: ValidationError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
______ TestPaymentService.test_create_payment_validation_error_currency _______

self = <test_payment_service.TestPaymentService object at 0x000001D2508E0850>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250A1F3D0>

    @pytest.mark.asyncio
    async def test_create_payment_validation_error_currency(self, payment_service):
        """Test payment creation with invalid currency."""
>       invalid_request = PaymentCreateRequest(
            amount=Decimal("10.00"),
            currency="US",  # Invalid currency (too short)
            payment_method=PaymentMethod.CREDIT_CARD.value,
            customer_id="cust_123",
            customer_email="test@example.com",
            customer_name="Test Customer",
            card_token="tok_123",
            description="Test payment",
            is_test=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for PaymentCreateRequest
E       currency
E         Value error, Currency must be a 3-character code [type=value_error, input_value='US', input_type=str]
E           For further information visit https://errors.pydantic.dev/2.11/v/value_error

tests\unit\test_payment_service.py:86: ValidationError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_________________ TestPaymentService.test_get_payment_success _________________

self = <test_payment_service.TestPaymentService object at 0x000001D2508E1590>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250AA3190>
sample_payment = <coroutine object sample_payment at 0x000001D250A42B60>

    @pytest.mark.asyncio
    async def test_get_payment_success(self, payment_service, sample_payment):
        """Test successful payment retrieval."""
>       payment = await payment_service.get_payment(sample_payment.id)
E       AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:122: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
________________ TestPaymentService.test_get_payment_not_found ________________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250AADE50>
payment_id = UUID('d4a61aa0-06af-4ab5-b60f-c56cefe5a7cd')

    async def get_by_id(self, payment_id: uuid.UUID) -> Optional[Payment]:
        """
        Get payment by ID.
    
        Args:
            payment_id: Payment UUID
    
        Returns:
            Payment or None if not found
        """
        try:
>           result = await self.session.execute(
                select(Payment)
                .options(selectinload(Payment.webhooks), selectinload(Payment.audit_logs))
                .where(Payment.id == payment_id)
            )
E           AttributeError: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:61: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_service.TestPaymentService object at 0x000001D2508E1C50>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250AAEBD0>

    @pytest.mark.asyncio
    async def test_get_payment_not_found(self, payment_service):
        """Test payment retrieval with non-existent ID."""
        non_existent_id = uuid.uuid4()
    
        with pytest.raises(PaymentNotFoundError, match=f"Payment {non_existent_id} not found"):
>           await payment_service.get_payment(non_existent_id)

tests\unit\test_payment_service.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\core\services\payment_service.py:196: in get_payment
    payment = await self.payment_repository.get_by_id(payment_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250AADE50>
payment_id = UUID('d4a61aa0-06af-4ab5-b60f-c56cefe5a7cd')

    async def get_by_id(self, payment_id: uuid.UUID) -> Optional[Payment]:
        """
        Get payment by ID.
    
        Args:
            payment_id: Payment UUID
    
        Returns:
            Payment or None if not found
        """
        try:
            result = await self.session.execute(
                select(Payment)
                .options(selectinload(Payment.webhooks), selectinload(Payment.audit_logs))
                .where(Payment.id == payment_id)
            )
            return result.scalar_one_or_none()
        except Exception as e:
>           raise DatabaseError(f"Failed to get payment by ID: {str(e)}")
E           src.core.exceptions.DatabaseError: Failed to get payment by ID: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:68: DatabaseError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_________ TestPaymentService.test_get_payment_by_external_id_success __________

self = <test_payment_service.TestPaymentService object at 0x000001D2508E2310>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250B7EE10>
sample_payment = <coroutine object sample_payment at 0x000001D250A0B3D0>

    @pytest.mark.asyncio
    async def test_get_payment_by_external_id_success(self, payment_service, sample_payment):
        """Test successful payment retrieval by external ID."""
>       payment = await payment_service.get_payment_by_external_id(sample_payment.external_id)
E       AttributeError: 'coroutine' object has no attribute 'external_id'

tests\unit\test_payment_service.py:140: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
________ TestPaymentService.test_get_payment_by_external_id_not_found _________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250C49F50>
external_id = 'pay_nonexistent'

    async def get_by_external_id(self, external_id: str) -> Optional[Payment]:
        """
        Get payment by external ID.
    
        Args:
            external_id: External payment identifier
    
        Returns:
            Payment or None if not found
        """
        try:
>           result = await self.session.execute(
                select(Payment)
                .options(selectinload(Payment.webhooks), selectinload(Payment.audit_logs))
                .where(Payment.external_id == external_id)
            )
E           AttributeError: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:81: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_service.TestPaymentService object at 0x000001D2508E29D0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C4A150>

    @pytest.mark.asyncio
    async def test_get_payment_by_external_id_not_found(self, payment_service):
        """Test payment retrieval by non-existent external ID."""
        non_existent_external_id = "pay_nonexistent"
    
        with pytest.raises(PaymentNotFoundError, match=f"Payment with external ID {non_existent_external_id} not found"):
>           await payment_service.get_payment_by_external_id(non_existent_external_id)

tests\unit\test_payment_service.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\core\services\payment_service.py:228: in get_payment_by_external_id
    payment = await self.payment_repository.get_by_external_id(external_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250C49F50>
external_id = 'pay_nonexistent'

    async def get_by_external_id(self, external_id: str) -> Optional[Payment]:
        """
        Get payment by external ID.
    
        Args:
            external_id: External payment identifier
    
        Returns:
            Payment or None if not found
        """
        try:
            result = await self.session.execute(
                select(Payment)
                .options(selectinload(Payment.webhooks), selectinload(Payment.audit_logs))
                .where(Payment.external_id == external_id)
            )
            return result.scalar_one_or_none()
        except Exception as e:
>           raise DatabaseError(f"Failed to get payment by external ID: {str(e)}")
E           src.core.exceptions.DatabaseError: Failed to get payment by external ID: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:88: DatabaseError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_______________ TestPaymentService.test_update_payment_success ________________

self = <test_payment_service.TestPaymentService object at 0x000001D2508E3050>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C94390>
sample_payment = <coroutine object sample_payment at 0x000001D250A0AF20>
sample_payment_update_request = PaymentUpdateRequest(description='Updated description', metadata={'updated': True, 'timestamp': '2025-09-20T08:30:25.647728'})

    @pytest.mark.asyncio
    async def test_update_payment_success(self, payment_service, sample_payment, sample_payment_update_request):
        """Test successful payment update."""
>       updated_payment = await payment_service.update_payment(sample_payment.id, sample_payment_update_request)
E       AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:157: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
___________ TestPaymentService.test_update_payment_validation_error ___________

self = <test_payment_service.TestPaymentService object at 0x000001D2508E37D0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250984AD0>
sample_payment = <coroutine object sample_payment at 0x000001D250A0AB60>

    @pytest.mark.asyncio
    async def test_update_payment_validation_error(self, payment_service, sample_payment):
        """Test payment update with invalid data."""
        invalid_update = PaymentUpdateRequest(
            description=None,
            metadata=None  # Both fields are None
        )
    
        with pytest.raises(ValidationError, match="At least one field must be provided for update"):
>           await payment_service.update_payment(sample_payment.id, invalid_update)
E           AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:173: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_______________ TestPaymentService.test_refund_payment_success ________________

self = <test_payment_service.TestPaymentService object at 0x000001D2508E3F50>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250ABD950>
sample_payment = <coroutine object sample_payment at 0x000001D250A097B0>
sample_payment_refund_request = PaymentRefundRequest(amount=Decimal('5.00'), reason='Customer request', metadata={'refund_reason': 'customer_request'})

    @pytest.mark.asyncio
    async def test_refund_payment_success(self, payment_service, sample_payment, sample_payment_refund_request):
        """Test successful payment refund."""
        # Set payment status to COMPLETED to make it refundable
>       sample_payment.status = PaymentStatus.COMPLETED

tests\unit\test_payment_service.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <enum 'PaymentStatus'>, name = 'COMPLETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: COMPLETED

..\..\..\AppData\Local\Programs\Python\Python311\Lib\enum.py:786: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
____________ TestPaymentService.test_refund_payment_not_refundable ____________

self = <test_payment_service.TestPaymentService object at 0x000001D2508EC710>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C62B50>
sample_payment = <coroutine object sample_payment at 0x000001D250A0B2E0>
sample_payment_refund_request = PaymentRefundRequest(amount=Decimal('5.00'), reason='Customer request', metadata={'refund_reason': 'customer_request'})

    @pytest.mark.asyncio
    async def test_refund_payment_not_refundable(self, payment_service, sample_payment, sample_payment_refund_request):
        """Test refund of non-refundable payment."""
        # Keep payment status as PENDING (not refundable)
    
        with pytest.raises(ValidationError, match="Payment cannot be refunded"):
>           await payment_service.refund_payment(sample_payment.id, sample_payment_refund_request)
E           AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:199: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_______ TestPaymentService.test_refund_payment_amount_exceeds_remaining _______

self = <test_payment_service.TestPaymentService object at 0x000001D2508ECE90>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C35C50>
sample_payment = <coroutine object sample_payment at 0x000001D250A0B6A0>

    @pytest.mark.asyncio
    async def test_refund_payment_amount_exceeds_remaining(self, payment_service, sample_payment):
        """Test refund with amount exceeding remaining refundable amount."""
        # Set payment status to COMPLETED and set refunded amount
>       sample_payment.status = PaymentStatus.COMPLETED

tests\unit\test_payment_service.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <enum 'PaymentStatus'>, name = 'COMPLETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: COMPLETED

..\..\..\AppData\Local\Programs\Python\Python311\Lib\enum.py:786: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_______________ TestPaymentService.test_cancel_payment_success ________________

self = <test_payment_service.TestPaymentService object at 0x000001D2508ED650>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C95DD0>
sample_payment = <coroutine object sample_payment at 0x000001D250A0AA70>
sample_payment_cancel_request = PaymentCancelRequest(reason='Customer cancelled', metadata={'cancellation_reason': 'customer_cancelled'})

    @pytest.mark.asyncio
    async def test_cancel_payment_success(self, payment_service, sample_payment, sample_payment_cancel_request):
        """Test successful payment cancellation."""
        # Set payment status to PENDING to make it cancellable
>       sample_payment.status = PaymentStatus.PENDING
E       AttributeError: 'coroutine' object has no attribute 'status'

tests\unit\test_payment_service.py:221: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
___________ TestPaymentService.test_cancel_payment_not_cancellable ____________

self = <test_payment_service.TestPaymentService object at 0x000001D2508EDDD0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D2509722D0>
sample_payment = <coroutine object sample_payment at 0x000001D250A088B0>
sample_payment_cancel_request = PaymentCancelRequest(reason='Customer cancelled', metadata={'cancellation_reason': 'customer_cancelled'})

    @pytest.mark.asyncio
    async def test_cancel_payment_not_cancellable(self, payment_service, sample_payment, sample_payment_cancel_request):
        """Test cancellation of non-cancellable payment."""
        # Set payment status to COMPLETED (not cancellable)
>       sample_payment.status = PaymentStatus.COMPLETED

tests\unit\test_payment_service.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <enum 'PaymentStatus'>, name = 'COMPLETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: COMPLETED

..\..\..\AppData\Local\Programs\Python\Python311\Lib\enum.py:786: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
________________ TestPaymentService.test_list_payments_success ________________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250AACAD0>
customer_id = None, status = None, start_date = None, end_date = None, page = 1
per_page = 20, order_by = 'created_at', order_direction = 'desc'

    async def list_payments(
        self,
        customer_id: Optional[str] = None,
        status: Optional[PaymentStatus] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        page: int = 1,
        per_page: int = 20,
        order_by: str = "created_at",
        order_direction: str = "desc"
    ) -> Dict[str, Any]:
        """
        List payments with filtering and pagination.
    
        Args:
            customer_id: Filter by customer ID
            status: Filter by payment status
            start_date: Filter by start date
            end_date: Filter by end date
            page: Page number (1-based)
            per_page: Items per page
            order_by: Field to order by
            order_direction: Order direction (asc/desc)
    
        Returns:
            Dictionary containing payments list and pagination info
        """
        try:
            # Build query
            query = select(Payment)
    
            # Apply filters
            conditions = []
            if customer_id:
                conditions.append(Payment.customer_id == customer_id)
            if status:
                conditions.append(Payment.status == status.value)
            if start_date:
                conditions.append(Payment.created_at >= start_date)
            if end_date:
                conditions.append(Payment.created_at <= end_date)
    
            if conditions:
                query = query.where(and_(*conditions))
    
            # Apply ordering
            order_column = getattr(Payment, order_by, Payment.created_at)
            if order_direction.lower() == "desc":
                query = query.order_by(order_column.desc())
            else:
                query = query.order_by(order_column.asc())
    
            # Get total count
            count_query = select(func.count(Payment.id))
            if conditions:
                count_query = count_query.where(and_(*conditions))
    
>           total_result = await self.session.execute(count_query)
E           AttributeError: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:228: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_service.TestPaymentService object at 0x000001D2508E3AD0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250AAFAD0>
sample_payment = <coroutine object sample_payment at 0x000001D250A0A6B0>

    @pytest.mark.asyncio
    async def test_list_payments_success(self, payment_service, sample_payment):
        """Test successful payment listing."""
>       result = await payment_service.list_payments()

tests\unit\test_payment_service.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\core\services\payment_service.py:605: in list_payments
    result = await self.payment_repository.list_payments(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250AACAD0>
customer_id = None, status = None, start_date = None, end_date = None, page = 1
per_page = 20, order_by = 'created_at', order_direction = 'desc'

    async def list_payments(
        self,
        customer_id: Optional[str] = None,
        status: Optional[PaymentStatus] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        page: int = 1,
        per_page: int = 20,
        order_by: str = "created_at",
        order_direction: str = "desc"
    ) -> Dict[str, Any]:
        """
        List payments with filtering and pagination.
    
        Args:
            customer_id: Filter by customer ID
            status: Filter by payment status
            start_date: Filter by start date
            end_date: Filter by end date
            page: Page number (1-based)
            per_page: Items per page
            order_by: Field to order by
            order_direction: Order direction (asc/desc)
    
        Returns:
            Dictionary containing payments list and pagination info
        """
        try:
            # Build query
            query = select(Payment)
    
            # Apply filters
            conditions = []
            if customer_id:
                conditions.append(Payment.customer_id == customer_id)
            if status:
                conditions.append(Payment.status == status.value)
            if start_date:
                conditions.append(Payment.created_at >= start_date)
            if end_date:
                conditions.append(Payment.created_at <= end_date)
    
            if conditions:
                query = query.where(and_(*conditions))
    
            # Apply ordering
            order_column = getattr(Payment, order_by, Payment.created_at)
            if order_direction.lower() == "desc":
                query = query.order_by(order_column.desc())
            else:
                query = query.order_by(order_column.asc())
    
            # Get total count
            count_query = select(func.count(Payment.id))
            if conditions:
                count_query = count_query.where(and_(*conditions))
    
            total_result = await self.session.execute(count_query)
            total = total_result.scalar()
    
            # Apply pagination
            offset = (page - 1) * per_page
            query = query.offset(offset).limit(per_page)
    
            # Execute query
            result = await self.session.execute(query)
            payments = result.scalars().all()
    
            # Calculate pagination info
            total_pages = (total + per_page - 1) // per_page
    
            return {
                "payments": list(payments),
                "total": total,
                "page": page,
                "per_page": per_page,
                "total_pages": total_pages,
                "has_next": page < total_pages,
                "has_prev": page > 1
            }
        except Exception as e:
>           raise DatabaseError(f"Failed to list payments: {str(e)}")
E           src.core.exceptions.DatabaseError: Failed to list payments: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:252: DatabaseError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_____________ TestPaymentService.test_list_payments_with_filters ______________

self = <test_payment_service.TestPaymentService object at 0x000001D2508DBED0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250CE2250>
sample_payment = <coroutine object sample_payment at 0x000001D250A098A0>

    @pytest.mark.asyncio
    async def test_list_payments_with_filters(self, payment_service, sample_payment):
        """Test payment listing with filters."""
        # Test filtering by customer_id
>       result = await payment_service.list_payments(customer_id=sample_payment.customer_id)
E       AttributeError: 'coroutine' object has no attribute 'customer_id'

tests\unit\test_payment_service.py:262: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_______________ TestPaymentService.test_search_payments_success _______________

self = <test_payment_service.TestPaymentService object at 0x000001D2508ED950>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250956C90>
sample_payment = <coroutine object sample_payment at 0x000001D250A0AB60>

    @pytest.mark.asyncio
    async def test_search_payments_success(self, payment_service, sample_payment):
        """Test successful payment search."""
>       result = await payment_service.search_payments(sample_payment.customer_id)
E       AttributeError: 'coroutine' object has no attribute 'customer_id'

tests\unit\test_payment_service.py:275: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
______________ TestPaymentService.test_get_payment_stats_success ______________

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250C23450>
customer_id = None, start_date = None, end_date = None

    async def get_payment_stats(
        self,
        customer_id: Optional[str] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None
    ) -> Dict[str, Any]:
        """
        Get payment statistics.
    
        Args:
            customer_id: Filter by customer ID
            start_date: Filter by start date
            end_date: Filter by end date
    
        Returns:
            Dictionary containing payment statistics
        """
        try:
            # Build base query
            base_query = select(Payment)
            conditions = []
    
            if customer_id:
                conditions.append(Payment.customer_id == customer_id)
            if start_date:
                conditions.append(Payment.created_at >= start_date)
            if end_date:
                conditions.append(Payment.created_at <= end_date)
    
            if conditions:
                base_query = base_query.where(and_(*conditions))
    
            # Get total count
            count_query = select(func.count(Payment.id))
            if conditions:
                count_query = count_query.where(and_(*conditions))
    
>           total_result = await self.session.execute(count_query)
E           AttributeError: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:352: AttributeError

During handling of the above exception, another exception occurred:

self = <test_payment_service.TestPaymentService object at 0x000001D2508ECA90>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250C22C50>
sample_payment = <coroutine object sample_payment at 0x000001D250A0A980>

    @pytest.mark.asyncio
    async def test_get_payment_stats_success(self, payment_service, sample_payment):
        """Test successful payment statistics retrieval."""
>       stats = await payment_service.get_payment_stats()

tests\unit\test_payment_service.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\core\services\payment_service.py:680: in get_payment_stats
    stats = await self.payment_repository.get_payment_stats(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.core.repositories.payment_repository.PaymentRepository object at 0x000001D250C23450>
customer_id = None, start_date = None, end_date = None

    async def get_payment_stats(
        self,
        customer_id: Optional[str] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None
    ) -> Dict[str, Any]:
        """
        Get payment statistics.
    
        Args:
            customer_id: Filter by customer ID
            start_date: Filter by start date
            end_date: Filter by end date
    
        Returns:
            Dictionary containing payment statistics
        """
        try:
            # Build base query
            base_query = select(Payment)
            conditions = []
    
            if customer_id:
                conditions.append(Payment.customer_id == customer_id)
            if start_date:
                conditions.append(Payment.created_at >= start_date)
            if end_date:
                conditions.append(Payment.created_at <= end_date)
    
            if conditions:
                base_query = base_query.where(and_(*conditions))
    
            # Get total count
            count_query = select(func.count(Payment.id))
            if conditions:
                count_query = count_query.where(and_(*conditions))
    
            total_result = await self.session.execute(count_query)
            total_count = total_result.scalar()
    
            # Get total amount
            amount_query = select(func.sum(Payment.amount))
            if conditions:
                amount_query = amount_query.where(and_(*conditions))
    
            amount_result = await self.session.execute(amount_query)
            total_amount = amount_result.scalar() or Decimal('0')
    
            # Get status counts
            status_query = (
                select(Payment.status, func.count(Payment.id))
                .group_by(Payment.status)
            )
            if conditions:
                status_query = status_query.where(and_(*conditions))
    
            status_result = await self.session.execute(status_query)
            status_counts = dict(status_result.fetchall())
    
            return {
                "total_count": total_count,
                "total_amount": float(total_amount),
                "status_counts": status_counts,
                "average_amount": float(total_amount / total_count) if total_count > 0 else 0
            }
        except Exception as e:
>           raise DatabaseError(f"Failed to get payment stats: {str(e)}")
E           src.core.exceptions.DatabaseError: Failed to get payment stats: 'async_generator' object has no attribute 'execute'

src\core\repositories\payment_repository.py:381: DatabaseError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
___ TestPaymentService.test_get_payment_status_history_no_advanced_features ___

self = <test_payment_service.TestPaymentService object at 0x000001D2508EE610>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D25094B210>
sample_payment = <coroutine object sample_payment at 0x000001D250A0AB60>

    @pytest.mark.asyncio
    async def test_get_payment_status_history_no_advanced_features(self, payment_service, sample_payment):
        """Test status history retrieval without advanced features."""
        payment_service.advanced_features = None
    
>       history = await payment_service.get_payment_status_history(sample_payment.id)
E       AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:296: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
______ TestPaymentService.test_get_payment_metadata_no_advanced_features ______

self = <test_payment_service.TestPaymentService object at 0x000001D2508EE9D0>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D25096FC50>
sample_payment = <coroutine object sample_payment at 0x000001D250A088B0>

    @pytest.mark.asyncio
    async def test_get_payment_metadata_no_advanced_features(self, payment_service, sample_payment):
        """Test metadata retrieval without advanced features."""
        payment_service.advanced_features = None
    
>       metadata = await payment_service.get_payment_metadata(sample_payment.id)
E       AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:305: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
____ TestPaymentService.test_update_payment_metadata_no_advanced_features _____

self = <test_payment_service.TestPaymentService object at 0x000001D2508EEF10>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250ABD250>
sample_payment = <coroutine object sample_payment at 0x000001D250A0B010>

    @pytest.mark.asyncio
    async def test_update_payment_metadata_no_advanced_features(self, payment_service, sample_payment):
        """Test metadata update without advanced features."""
        payment_service.advanced_features = None
    
        # Should not raise an error, just return
>       await payment_service.update_payment_metadata(sample_payment.id, {"test": "data"})
E       AttributeError: 'coroutine' object has no attribute 'id'

tests\unit\test_payment_service.py:315: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
__ TestPaymentServiceValidation.test_validate_payment_data_amount_too_large ___

self = <test_payment_service.TestPaymentServiceValidation object at 0x000001D2508F5350>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250CB6910>

    @pytest.mark.asyncio
    async def test_validate_payment_data_amount_too_large(self, payment_service):
        """Test validation with amount exceeding maximum."""
>       invalid_request = PaymentCreateRequest(
            amount=Decimal("1000000.00"),  # Exceeds maximum
            currency="USD",
            payment_method=PaymentMethod.CREDIT_CARD.value,
            customer_id="cust_123",
            customer_email="test@example.com",
            customer_name="Test Customer",
            card_token="tok_123",
            description="Test payment",
            is_test=True
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for PaymentCreateRequest
E       amount
E         Value error, Amount cannot exceed 999,999.99 [type=value_error, input_value=Decimal('1000000.00'), input_type=Decimal]
E           For further information visit https://errors.pydantic.dev/2.11/v/value_error

tests\unit\test_payment_service.py:363: ValidationError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
____ TestPaymentServiceValidation.test_validate_refund_eligibility_success ____

self = <test_payment_service.TestPaymentServiceValidation object at 0x000001D2508F6090>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250ACEB10>
sample_payment = <coroutine object sample_payment at 0x000001D250A0AB60>

    @pytest.mark.asyncio
    async def test_validate_refund_eligibility_success(self, payment_service, sample_payment):
        """Test successful refund eligibility validation."""
        # Set payment status to COMPLETED
>       sample_payment.status = PaymentStatus.COMPLETED

tests\unit\test_payment_service.py:400: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <enum 'PaymentStatus'>, name = 'COMPLETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: COMPLETED

..\..\..\AppData\Local\Programs\Python\Python311\Lib\enum.py:786: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
_ TestPaymentServiceValidation.test_validate_cancellation_eligibility_success _

self = <test_payment_service.TestPaymentServiceValidation object at 0x000001D2508F6790>
payment_service = <src.core.services.payment_service.PaymentService object at 0x000001D250A8BD10>
sample_payment = <coroutine object sample_payment at 0x000001D250A09E40>

    @pytest.mark.asyncio
    async def test_validate_cancellation_eligibility_success(self, payment_service, sample_payment):
        """Test successful cancellation eligibility validation."""
        # Set payment status to PENDING
>       sample_payment.status = PaymentStatus.PENDING
E       AttributeError: 'coroutine' object has no attribute 'status'

tests\unit\test_payment_service.py:412: AttributeError
----------------------------- Captured log setup ------------------------------
WARNING  src.core.services.payment_service:payment_service.py:72 Advanced features not initialized: Cache client not initialized
WARNING  src.core.services.payment_service:payment_service.py:79 Authorize.net client not initialized: 1 validation error for AuthorizeNetCredentials
transaction_key
  String should have at most 16 characters [type=string_too_long, input_value='your-transaction-key', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/string_too_long
============================== warnings summary ===============================
src\infrastructure\database\base.py:7
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\infrastructure\database\base.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

src\api\v1\schemas\payment.py:41
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:41: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('amount')

src\api\v1\schemas\payment.py:50
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:50: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('currency')

src\api\v1\schemas\payment.py:89
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:89: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('amount')

src\api\v1\schemas\payment.py:234
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\payment.py:234: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('end_date')

src\api\v1\schemas\webhook.py:30
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\webhook.py:30: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('url')

src\api\v1\schemas\webhook.py:37
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\webhook.py:37: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('event_types')

src\api\v1\schemas\webhook.py:192
  C:\Users\PundlikR\Documents\hackathon\EasyPay\src\api\v1\schemas\webhook.py:192: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('end_date')

..\..\..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\fields.py:1093: 14 warnings
  C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\fields.py:1093: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warn(

..\..\..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\_internal\_config.py:323
  C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\Lib\site-packages\pydantic\_internal\_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform win32, python 3.11.9-final-0 -----------
Name                                                 Stmts   Miss  Cover   Missing
----------------------------------------------------------------------------------
src\api\v1\schemas\__init__.py                           3      0   100%
src\api\v1\schemas\payment.py                          104     11    89%   45, 93, 167, 172, 177-179, 237-240
src\api\v1\schemas\webhook.py                           80     14    82%   33-35, 40-55, 125, 133, 195-198
src\core\config.py                                      37      1    97%   81
src\core\exceptions.py                                  55     11    80%   43, 55, 67, 79, 91, 115, 151, 163, 173, 183, 195
src\core\models\__init__.py                              4      0   100%
src\core\models\audit_log.py                            61      4    93%   107, 123, 147, 169
src\core\models\payment.py                              70      6    91%   112, 117, 122, 127-129
src\core\models\webhook.py                              75     18    76%   100, 105, 113, 120-125, 129-133, 137-140
src\core\repositories\__init__.py                        4      0   100%
src\core\repositories\audit_log_repository.py          174    150    14%   39-47, 59-67, 106-170, 182-190, 202-210, 222-230, 242-250, 262-270, 287-348, 367-409, 440-459, 488-506, 518-530
src\core\repositories\payment_repository.py            150     86    43%   43-45, 48, 66, 86, 100-108, 124-142, 157-169, 205, 207, 209, 211, 214, 221, 226, 229-242, 271-313, 338, 340, 342, 345, 350, 353-374, 393-401, 413-421
src\core\repositories\webhook_repository.py            168    144    14%   24, 39-47, 59-67, 79-87, 103-121, 136-148, 179-235, 247-260, 269-283, 295-303, 315-323, 340-389, 410-420, 439-452, 469-482
src\core\services\__init__.py                            2      0   100%
src\core\services\advanced_payment_features.py         256    177    31%   57-64, 97-104, 113-128, 132, 136-138, 142-149, 153, 168, 172-189, 196-197, 202-213, 217-225, 229-233, 242, 247, 254-255, 260-276, 280-288, 295-296, 300-305, 309-317, 321-326, 333-334, 338-360, 365-368, 375-391, 395-419, 423-429, 433-439, 444, 448, 452, 456, 460, 464, 468
src\core\services\payment_service.py                   275    168    39%   70, 133-169, 174, 197-201, 204, 207-209, 229-233, 236, 239-241, 259-306, 331-446, 467-573, 616-617, 621-623, 642-658, 686-687, 691-693, 707, 710, 714, 738-739, 753-762, 778-779, 791-794, 806-809, 820-823, 838, 850
src\infrastructure\cache.py                             70     49    30%   29-47, 63, 75-86, 93, 108-112, 134-141, 156-160, 175-179, 195-198, 214-217
src\infrastructure\database\__init__.py                  6      0   100%
src\infrastructure\database\base.py                      2      0   100%
src\infrastructure\database\data_validator.py          310    251    19%   51-55, 67-69, 73, 81, 179, 226, 309-380, 399-418, 430-475, 486-519, 530-548, 555-558, 562-566, 570-574, 578-584, 588-591, 595-597, 601-604, 608-610, 614-616, 620-623, 627-629, 633-642, 646-650, 654-658, 662-668, 672-674, 678-684, 688-691, 695, 699-703, 707-711, 715-721, 725-731, 735-737, 741-743, 747-749, 753-755, 759-765, 769-775, 779-785
src\infrastructure\database\error_handler.py           178    130    27%   80-90, 102-106, 110, 122, 196-223, 233-266, 278-305, 315-334, 344-363, 373, 385, 397, 425-458, 470-483, 490-494, 506-542, 551-572, 587-600, 607-608, 620-638
src\infrastructure\database\migration_manager.py       224    180    20%   74-84, 96-102, 111-147, 159-170, 182-209, 228-251, 260-287, 296-308, 320-332, 348-391, 406-432, 441-469, 484-495, 504-542, 551-577
src\infrastructure\database\transaction_manager.py     141    108    23%   47-48, 72-126, 139-149, 173-178, 200-213, 235-256, 278-293, 305-313, 325-353, 374-377, 392-397, 409-415
src\integrations\authorize_net\__init__.py               4      0   100%
src\integrations\authorize_net\client.py               129    104    19%   42-43, 51-61, 65-67, 79-125, 151-192, 218-259, 281-306, 330-359, 379-401, 416-435, 450-486, 490, 494, 498
src\integrations\authorize_net\exceptions.py            30     17    43%   19, 36-41, 54-65, 77-86, 97-102
src\integrations\authorize_net\models.py                94     31    67%   40-53, 59-76, 103-108
src\main.py                                             67     67     0%   4-205
----------------------------------------------------------------------------------
TOTAL                                                 2773   1727    38%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

FAIL Required test coverage of 80% not reached. Total coverage: 37.72%
=========================== short test summary info ===========================
FAILED tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_initialization_with_settings
FAILED tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_get_api_url_sandbox
FAILED tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_get_api_url_production
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_with_advanced_features
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_validation_error_amount
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_create_payment_validation_error_currency
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_not_found
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_by_external_id_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_by_external_id_not_found
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_update_payment_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_update_payment_validation_error
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_refund_payment_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_refund_payment_not_refundable
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_refund_payment_amount_exceeds_remaining
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_cancel_payment_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_cancel_payment_not_cancellable
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_list_payments_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_list_payments_with_filters
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_search_payments_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_stats_success
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_status_history_no_advanced_features
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_get_payment_metadata_no_advanced_features
FAILED tests/unit/test_payment_service.py::TestPaymentService::test_update_payment_metadata_no_advanced_features
FAILED tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_payment_data_amount_too_large
FAILED tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_refund_eligibility_success
FAILED tests/unit/test_payment_service.py::TestPaymentServiceValidation::test_validate_cancellation_eligibility_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_initialization_with_credentials
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_test_authentication_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_test_authentication_failure
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_test_authentication_network_error
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_charge_credit_card_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_charge_credit_card_with_order_info
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_charge_credit_card_failure
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_authorize_only_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_capture_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_capture_without_amount
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_refund_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_void_transaction_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_make_request_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_make_request_http_error
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_make_request_json_decode_error
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_success
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_declined
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_error
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_parse_transaction_response_no_messages
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_context_manager
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClient::test_client_close
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_parse_transaction_response_empty_message_list
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_parse_transaction_response_missing_transaction_response
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_make_request_unexpected_error
ERROR tests/unit/test_authorize_net_client.py::TestAuthorizeNetClientEdgeCases::test_charge_credit_card_unexpected_error
============ 28 failed, 6 passed, 23 warnings, 25 errors in 3.82s =============

=== STDERR ===
C:\Users\PundlikR\AppData\Local\Programs\Python\Python311\Lib\ast.py:50: RuntimeWarning: coroutine 'sample_payment' was never awaited
  return compile(source, filename, mode, flags,
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
sys:1: RuntimeWarning: coroutine 'sample_payment' was never awaited
